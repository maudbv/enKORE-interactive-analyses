# Set parameters:
Env = -1
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(y){0.5*(Env - min(y, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
mtext( 1, text = "trait")
mtext(2 , text = "probability")
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
knitr::opts_chunk$set(echo = TRUE)
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Set parameters:
Env = -1
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(y){0.5*(Env - min(y, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
mtext( 1, text = "trait")
mtext(2 , text = "probability")
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
sim.filter(Env = E, scenario = "disruptive")
par (mfrow(1 ,6), mar = c(2,2,2,0))
par (mfrow= c(1 ,6), mar = c(2,2,2,0))
par (mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
sim.filter(Env = E, scenario = "disruptive")
mtext( 1, text = "trait", line = 2)
mtext( 1, text = "trait", line = 2)
sim.filter(Env = E, scenario = "disruptive")
mtext( 1, text = "trait", line = 2)
mtext(2 , text = "probability", line = 2)
mtext(3, text = paste("Env =", Env),font = 2)
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Set parameters:
Env = -1
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(y){0.5*(Env - min(y, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
mtext( 1, text = "trait", line = 2)
mtext(2 , text = "probability", line = 2)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
sim.filter(Env = E, scenario = "disruptive")
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
Env
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(y){0.5*(Env - min(y, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
mtext( 1, text = "trait", line = 2)
mtext(2 , text = "probability", line = 2)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
```{r disruptive, fig.height=8, fig.width = 15}
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(0,0,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(3, text = "Disruptive scenarios", outer = TRUE)
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(y){0.5*(Env - min(y, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
mtext( 1, text = "trait", line = 3)
mtext(2 , text = "probability", line = 3)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(1, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE)
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(y){0.5*(Env - min(y, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
# mtext( 1, text = "trait", line = 3)
# mtext(2 , text = "probability", line = 3)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,6), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-2, 2,length.out = 6)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-2, 2,length.out = 5)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,1,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "directional")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "directional")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Directional scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE, font = 2, cex = 1.5)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(z){0.5*(Env - min(z, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilizing") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilizing", ann = FALSE)
}
# mtext( 1, text = "trait", line = 3)
# mtext(2 , text = "probability", line = 3)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "directional")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Directional scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "stabilising")
}
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(z){0.5*(Env - min(z, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilising") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilising", ann = FALSE)
}
# mtext( 1, text = "trait", line = 3)
# mtext(2 , text = "probability", line = 3)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "stabilising")
}
knitr::opts_chunk$set(echo = TRUE)
sim.filter <- function( Env = 0, scenario = "directional") {
# Simulated filtering #####
# Species traits in the pool:
# uniform distribution between -1 and 1
x = runif(200,-1,1)
# Standardize traits between -2 and 2:
mfac <- (2 + 2)/(range(x)[2] - range(x)[1])
x <- (-2 + (x - range(x)[1]) * mfac)
# Probability distributions of trait selection under different scenarios:
# Neutral
if (scenario == "neutral") y = 1/length(x)
# Disruptive
if (scenario == "disruptive") {
y = 0.5*abs(Env - x)
plot(x,y, main = "Disruptive", ann = FALSE)
}
# Directional
if (scenario == "directional") {
y = sapply(x, function(z){0.5*(Env - min(z, Env))})
plot(x,y, main = "Directional", ann = FALSE)
}
# Stabilizing
if (scenario == "stabilising") {
sigma = 0.7 # choose an arbitrary value for standard deviation
y = 1*exp(-(x-Env)^2/(2*sigma^2))
plot(x,y, main = "Stabilising", ann = FALSE)
}
# mtext( 1, text = "trait", line = 3)
# mtext(2 , text = "probability", line = 3)
mtext(3, text = paste("Env =", Env),font = 2)
return( data.frame(trait = x, prob = y))
}
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "disruptive")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Disruptive scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "directional")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Directional scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "stabilising")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Stabilising scenarios", outer = TRUE, font = 2, cex = 1.5)
par(mfrow= c(1 ,5), mar = c(2,2,2,0), oma = c(1,1,2,0))
for (E in seq(-1.8, 1.8,length.out = 5)) {
sim.filter(Env = E, scenario = "directional")
}
mtext(1, text = "trait value", outer = TRUE)
mtext(2, text = "probability", outer = TRUE)
mtext(3, text = "Directional scenarios", outer = TRUE, font = 2, cex = 1.5)
tinytex::install_tinytex()
source('~/Dropbox/paperasse/Admin/Comptabilité/DKB account 2021/import DKB exported files.R', echo=TRUE)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='maudbernardverdier',
token='CD0C4206D3B1978802B1148E56751D06',
secret='<SECRET>')
rsconnect::setAccountInfo(name='maudbernardverdier',
token='86DCC086B68180073B46B722D6EB5EDC',
secret='KAq7ZF3wk6V56a5yyak449kdMIwxl5014TkYENHY')
library(shiny); runApp('Documents/Work/Research work/enKORE/enKore project/Interactive analyses/ORKG interactive analyses/scripts/R/hi_knowledge_shinyapp.R')
font_add
?font_add
??font_add
runApp('Documents/Work/Research work/enKORE/enKore project/Interactive analyses/ORKG interactive analyses/scripts/R/hi_knowledge_shinyapp.R')
darwin <- read.csv(file = "csv/comparison_R53407_Darwin's naturalisation.csv")
setwd("/Users/maud/Documents/Work/Research work/enKORE/enKore project/Interactive analyses/ORKG interactive analyses/scripts/R")
# Get data and themes ########
source("resources/ggplot_HiK_theme.R")
# Import comparison tables
darwin <- read.csv(file = "csv/comparison_R53407_Darwin's naturalisation.csv")
darwin$Title <- darwin$publication
names(darwin) <- stringr::str_replace_all(names(darwin), "\\.","_")
darwin <- darwin[!duplicated(darwin$Title),]
enemy <- read.csv(file = "csv/comparison_R58002_Enemy release.csv")
enemy$Title <- enemy$publication
names(enemy) <- stringr::str_replace_all(names(enemy), "\\.","_")
enemy <- enemy[!duplicated(enemy$Title),]
# Merge all tables in one
df_list <- list(darwin,enemy)
total <- Reduce(
function(x, y, ...) merge(x, y, all = TRUE, ...),
df_list
)
df_list
total$Continent
